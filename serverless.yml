# Service name
service: bonequinhos-api

# Create an optimized package for our functions
package:
  individually: true

# 
plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs14.x
  stage: prod
  region: sa-east-1

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    productsTableName: bonequinhos-produtos
    usersTableName: bonequinhos-usuarios

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      Resource: "arn:aws:dynamodb:sa-east-1:*:*"

functions:
  ####
  ####    Public Lambda Functions (Accessable by non-authorized users)
  ####
  listProducts:
    # Defines an HTTP API endpoint that calls the main function in listProducts.js
    # - path: url path is /products
    # - method: GET request
    handler: API/products-db/public/listProducts.main
    events:
      - http:
          path: products
          method: get
          cors: true
  getProduct:
    # Defines an HTTP API endpoint that calls the main function in getProduct.js
    # - path: url path is /notes/{name}
    # - method: GET request
    handler: API/products-db/public/getProduct.main
    events:
      - http:
          path: products/{name}
          method: get
          cors: true
  ####
  ####    Private Lambda Functions (Accessable by authorized users only)
  ####
  registerProduct:
    # Defines an HTTP API endpoint that calls the main function in registerProduct.js
    # - path: url path is /notes
    # - method: POST request
    # - authorizer: authenticate using the AWS IAM role
    handler: API/products-db/private/registerProduct.main
    events:
      - http:
          path: products
          method: post
          cors: true
          authorizer: aws_iam
  updateProduct:
    # Defines an HTTP API endpoint that calls the main function in updateProduct.js
    # - path: url path is /products/{name}
    # - method: PUT request
    handler: API/products-db/private/updateProduct.main
    events:
      - http:
          path: products/{name}
          method: put
          cors: true
          authorizer: aws_iam
  deleteProduct:
    # Defines an HTTP API endpoint that calls the main function in deleteProduct.js
    # - path: url path is /product/{name}
    # - method: DELETE request
    handler: API/products-db/private/deleteProduct.main
    events:
      - http:
          path: products/{name}
          method: delete
          cors: true
          authorizer: aws_iam

resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}